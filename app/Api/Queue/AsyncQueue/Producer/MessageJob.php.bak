<?php

declare(strict_types=1);

namespace App\Api\Queue\AsyncQueue\Producer;

use App\Api\Model\User;
use Carbon\Carbon;
use Hyperf\AsyncQueue\Job;
use Psr\Container\ContainerExceptionInterface;
use Psr\Container\NotFoundExceptionInterface;

class MessageJob extends Job
{
    public $params;

    // 任务执行失败后的重试次数，即最大执行次数为 $maxAttempts+1 次
    protected int $maxAttempts = 2;

    public function __construct($params)
    {
        console()->info('----------- MessageJob construct -----------', $params);

        $this->params = $params;
    }

    /**
     * @throws ContainerExceptionInterface
     * @throws NotFoundExceptionInterface
     */
    public function handle(): void
    {

        var_dump(">>> 监听到队列消息（晒单数据）：");

        // 根据参数处理具体逻辑
        // 通过具体参数获取模型等
        // 这里的逻辑会在 ConsumerProcess 进程中执行
        console()->info('----------- MessageJob -----------', [$this->params]);
        var_dump($this->params);
        logger()->info('----------- MessageJob -----------', [$this->params]);

        User::query()
            ->where('id', 3)
            ->update([
                'name' => Carbon::now()->toDateTimeString()
            ]);
    }

    // 失败处理
    public function failed(array $data): void
    {
        console()->info('----------- MessageJob failed -----------', $data);
    }
}
